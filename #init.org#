#+STARTUP: overview

* MELPA
#+begin_src elisp
  ;; Package repositories
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize)

  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src

* use-package
#+begin_src elisp
  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+end_src

* vertico

#+begin_src elisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

* ordeless

#+begin_src elisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* marginalia

#+begin_src elisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

* emacs
#+begin_src elisp
  (functionp 'module-load)
  (set-face-attribute 'default nil :height 160)
#+end_src
# relative line number
#+begin_src elisp  
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode)
#+end_src

#+begin_src elisp
  ;;disable make of backup files
  (setq make-backup-files nil)
#+end_src

#+begin_src elisp
  (setq visible-bell 1)
#+end_src

#+begin_src elisp
  ;; (set-fontset-font
  ;;  t
  ;;  '(#x1f300 . #x1fad0)
  ;;  (cond
  ;;   ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
  ;;   ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
  ;;   ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
  ;;   ((member "Symbola" (font-family-list)) "Symbola")
  ;;  ))


#+end_src
* themes
#+begin_src elisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t))
#+end_src

* start page
#+begin_src elisp
  (setq inhibit-startup-screen t)

  (setq initial-scratch-message nil)

  (setq inhibit-startup-message t)

  (use-package page-break-lines
    :ensure t)
  (use-package all-the-icons
    :ensure t)
  (use-package dashboard
    :ensure t
    :config
    (setq show-week-agenda-p t)
    (setq dashboard-items '((recents . 15) (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 3)
    (dashboard-setup-startup-hook)
    )
#+end_src

* magit
[[https://magit.vc/manual/magit/index.html#SEC_Contents][manual magit]]
#+begin_src elisp
  (use-package magit
    :ensure t)
  (use-package magit-popup
    :ensure t)
#+end_src

* treemacs
#+begin_src elisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

* orgroam
#+begin_src elisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/.emacs.d/roamnodes/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+end_src

* company
#+begin_src elisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

* lsp-mpde
#+begin_src elisp
  ;; (defun efs/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))

  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :commands (lsp lsp-deferred)
  ;;   :hook ((lsp-mode . efs/lsp-mode-setup)
  ;; 	 (ruby-mode . lsp-deferred))
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  ;;   :config
  ;;   (lsp-enable-which-key-integration t))

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))

  ;; (use-package lsp-treemacs
  ;;   :ensure t
  ;;   :after lsp)

  ;; (use-package company
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :hook (lsp-mode . company-mode)
  ;;   :bind (:map company-active-map
  ;; 	      ("<tab>" . company-complete-selection))
  ;;   (:map lsp-mode-map
  ;; 	("<tab>" . company-indent-or-complete-common))
  ;;   :custom
  ;;   (company-minimum-prefix-length 1)
  ;;   (company-idle-delay 0.0))

  ;; (use-package company-box
  ;;   :ensure t
  ;;   :hook (company-mode . company-box-mode))

#+end_src

* flycheck
#+begin_src elisp
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init (global-flycheck-mode))
#+end_src

* which-key
#+begin_src elisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

* exec-path-from-shell


#+begin_src elisp
  (use-package exec-path-from-shell
    :ensure t)
  (when (memq window-system '(mac ns x))    
    (exec-path-from-shell-initialize))
#+end_src

* eaf
#+begin_src elisp
  ;; (use-package eaf
  ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  ;;   :custom
  ;; 					; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;;   (eaf-browser-continue-where-left-off t)
  ;;   (eaf-browser-enable-adblocker t)
  ;;   (browse-url-browser-function 'eaf-open-browser)
  ;;   :config
  ;;   (defalias 'browse-web #'eaf-open-browser)) ;; unbind, see more in the Wiki
  ;; (require 'eaf-browser)
#+end_src

* vterm
#+begin_src elisp
  (use-package vterm
    :ensure t
    :bind (:map vterm-mode-map
		("C-o" . other-window))
    :init
    (setq vterm-buffer-name-string "vterm %s"))

  ;; (use-package multi-vterm
  ;;   :ensure t) 
#+end_src

#+begin_src elisp
  (defun mvterm-below (&optional arg)
    "Split the current window 70/30 rather than 50/50.
  A single-digit prefix argument gives the top window arg*10%."
    (interactive "P")
    (let ((proportion (* (or arg 7.5) 0.1)))

      (split-window-below (round (* proportion (window-height)))))
    (other-window 1)
    (vterm))
  (global-set-key (kbd "C-c v") 'mvterm-below)
  (global-set-key (kbd "C-c t") 'vterm)


  (defun mvterm-left ()
    (interactive)
    (split-window-right)
    (other-window 1)
    (vterm))

  (global-set-key (kbd "C-c b") 'mvterm-left)
  (global-set-key (kbd "C-c j") 'multi-vterm-next)
  (global-set-key (kbd "C-c k") 'multi-vterm-prev)
#+end_src

* keybindg

#+begin_src elisp
  (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
#+end_src

#+begin_src elisp
  (global-set-key (kbd "C-o") 'other-window)

  (defun enter-above ()
    (interactive)
    (previous-line)
    (move-end-of-line 1)
    (newline 1))


  (global-set-key (kbd "M-o") 'enter-above)
#+end_src

#+begin_src elisp
  (defun indent-all ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (global-set-key (kbd "C-<tab>") 'indent-all)
#+end_src


#+begin_src elisp
  (defun cut-paste-in-nextline ()
    (interactive)
    (kill-ring-save (line-beginning-position 1) (line-end-position 1))
    (move-end-of-line 1)
    (newline)
    (yank 1))

  (global-set-key (kbd "C-x y") 'cut-paste-in-nextline)

#+end_src
* projectile
#+begin_src elisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map)))
#+end_src

* web-mode
#+begin_src elisp
  (use-package web-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
#+end_src
* undo-tree
#+begin_src elisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode))


  ;; Prevent undo tree files from polluting your git repo
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src




#+begin_src  elisp
  (setq kill-buffer-query-functions nil)

#+end_src


* treesitter
#+begin_src elisp
  (use-package tree-sitter
    :ensure t)

  (use-package tree-sitter-langs
    :ensure t)

  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

#+end_src

* eglot
#+begin_src elisp


  (use-package eglot
    :hook (python-mode . eglot-ensure))

  ;; ;;-------------------------------------------------

  ;; (use-package company
  ;;   :defer t
  ;;   :hook (python-mode . company-mode))

  ;; ;;-------------------------------------------------
  (add-hook 'after-init-hook 'global-company-mode)

#+end_src
